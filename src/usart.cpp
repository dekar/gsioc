#include "usart.h"
#include "base/gpio.h"
#include "base/clocker.h"
#include "base/ISR.h"
#include "apps.h"
#include "usb/USB.h"
struct t_recieve
{
    uint8_t magic;
    uint8_t buf[60];
}__attribute__((packed));

namespace USART
{
    static const uint8_t sendMax = 60;
    static uint8_t sendBuf[64];
    t_recieve recieve;
    static uint8_t pkgSize;
    //static uint8_t sendCount;
    static bool sendBusyFlag;
    uint8_t myAddress;
}



#define SEND_ON GPIOC->BSRR = GPIO_BSRR_BS13
#define SEND_OFF GPIOC->BSRR = GPIO_BSRR_BR13
//#define SEND_BUSY (GPIOB->ODR & (1 << 11))
inline void DMA_START()
{
    DMA1_Channel4->CCR  = DMA_CCR1_MINC | DMA_CCR1_DIR | DMA_CCR1_TCIE | DMA_CCR1_EN;
}
inline void DMA_STOP()
{
    DMA1_Channel4->CCR  = DMA_CCR1_MINC | DMA_CCR1_DIR | DMA_CCR1_TCIE ;//| DMA_CCR1_EN;
}

void USART::setup()
{
  //RCC
    RCCEnable(RCC->APB2ENR,RCC_APB2ENR_USART1EN);
    RCCEnable(RCC->AHBENR, RCC_AHBENR_DMA1EN);


  //GPIO
    IOSetup<IOA,10,IO_inFloat>();
    IOSetup<IOA,9,IO_outAFPP2MHz>();
    IOSetup<IOC,13,IO_outPP2MHz>();
    SEND_OFF;
  //USART
    //USART1->BRR = (78 << 4) + 2; // (78.(2/16)) - 57600 BAUD Rate
    USART1->BRR = (234 << 4) + 6; // 234.375(234.(6/16)) - 19200 BAUD Rate


    USART1->CR1 = USART_CR1_UE  //usart enable

        | USART_CR1_IDLEIE //Idle detector

        | USART_CR1_M           // 9 bit transfer
        | USART_CR1_PCE         // last bit - parity bit
        | USART_CR1_RXNEIE      // RXNE interrupt enable
        | USART_CR1_TE          // Transmitter enable
        | USART_CR1_RE;         // Receiver enable

    USART1->CR3 = USART_CR3_DMAT | USART_CR3_DMAR;
    USART1->SR = 0;

  // DMA (TX - DMA1CH4, RX-DMA1CH5)
    //DMA_STOP();
    DMA1_Channel4->CPAR = (uint32_t)&USART1->DR;
    DMA1_Channel4->CMAR = (uint32_t)USART::sendBuf;
    //DMA1->CCR5

    DMA1_Channel5->CPAR = (uint32_t)&USART1->DR;
    DMA1_Channel5->CMAR = (uint32_t)USART::recieve.buf;
    DMA1_Channel5->CNDTR = 60;
    DMA1_Channel5->CCR  = DMA_CCR1_MINC | DMA_CCR1_EN;

  // state machine
    USART::sendBusyFlag = false;
    USART::pkgSize = 0;
    USART::myAddress = 0;
    USART::recieve.magic = 's';

    NVIC_EnableIRQ(IRQn::USART1_IRQn);
    NVIC_SetPriority(IRQn::USART1_IRQn,2);
    NVIC_EnableIRQ(IRQn::DMA1_Channel4_IRQn);
    NVIC_SetPriority(IRQn::DMA1_Channel4_IRQn,2);
    //NVIC_EnableIRQ(IRQn::DMA1_Channel5_IRQn);

}

const uint8_t auchCRCHi[256]=
{
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
        0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
        0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
        0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
        0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
        0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
        0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
        0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
        0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
        0x40
};

 const uint8_t auchCRCLo[256]=
{
        0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
        0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
        0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
        0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
        0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
        0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
        0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
        0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
        0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
        0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
        0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
        0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
        0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
        0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
        0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
        0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
        0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
        0x40
};
uint16_t CRC16(const uint8_t *p, uint8_t len)
{
        uint8_t crc_hi;
        uint8_t crc_lo;

        if(len == 0)
            return 0;

        crc_hi = 0xFF;   // high byte of CRC initialized
        crc_lo = 0xFF;   // low byte of CRC initialized

        do
        {
           uint8_t i = crc_hi ^ *p++;        // will index into CRC lookup table
           crc_hi = crc_lo ^ auchCRCHi[i];    // calculate the CRC
           crc_lo =          auchCRCLo[i];
        }
        while (--len);         // pass through message buffer (max 256 items)

        return ((crc_hi << 8) | crc_lo);
}



void ISR::DMA1_Channel4_IRQ()
{
    DMA1->IFCR = DMA_IFCR_CTCIF4;
    USART1->SR = ~ USART_SR_TC;
    //makeBBPeriph(&USART1->CR1,USART_CR1_TCIE) = 1; // Transmission complete interrupt enable
    USART1->CR1 |= USART_CR1_TCIE; // Transmission complete interrupt enable
    DMA_STOP();
    //makeBBPeriph(&DMA1_Channel4->CCR, DMA_CCR1_EN) = 0;
}
void ISR::USART1_IRQ()
{

    if(USART1->SR & USART_SR_IDLE)
    {
        //USART1->SR &= ~USART_CR1_IDLEIE; // Transmission complete interrupt disable
        USART1->DR;
        if(USART::myAddress == 0) // master/promisquitete
            USART::pkgSize = 60 - DMA1_Channel5->CNDTR;
        if(57  > DMA1_Channel5->CNDTR)
            if(USART::myAddress == USART::recieve.buf[0]) // my Pkg
                USART::pkgSize = 60 - DMA1_Channel5->CNDTR;
        DMA1_Channel5->CCR = 0;
        DMA1_Channel5->CNDTR = 60;
        DMA1_Channel5->CCR  = DMA_CCR1_MINC | DMA_CCR1_TCIE | DMA_CCR1_EN;

        return;
    }
    if(USART1->SR & USART_SR_RXNE)
    {
        USART1->DR;
        return;
    }
    if(USART1->SR & USART_SR_TC)
    {
        USART1->CR1 &= ~USART_CR1_TCIE; // Transmission complete interrupt disable
        SEND_OFF;
        USART::sendBusyFlag = false;
    }
}
void sendPkg(void)
{
    SEND_ON;
    DMA_START();
}

bool USART::send(const uint8_t *buf, uint8_t size, uint8_t address, uint16_t crc)
{
    if(USART::sendBusyFlag)
        return false;
    if(size > USART::sendMax - 3)
        return false;
    __disable_irq();
    USART::sendBusyFlag = true;
    DMA1_Channel4->CNDTR =  size + 3;
    uint8_t *buf_p = USART::sendBuf;
    *buf_p++ = address;
    //uint16_t crc;
    if(crc == 0)
         crc = CRC16(buf,size);

    // = CRC16(buf,size);
    while(size)
    {
        *buf_p++ = *buf++;
        size --;
    }
    *buf_p++ = crc & 0xff;
    *buf_p++ = (crc >> 8);
    __enable_irq();
    sendPkg();
    return true;
    //start silence wait
}
bool USART::sendRaw(const uint8_t *buf, uint8_t size)
{
    if(USART::sendBusyFlag)
        return false;
    if(size > USART::sendMax)
        return false;
    __disable_irq();
    USART::sendBusyFlag = true;
    DMA1_Channel4->CNDTR =  size;
    uint8_t *buf_p = USART::sendBuf;
    while(size)
    {
        *buf_p++ = *buf++;
        size --;
    }
    __enable_irq();
    sendPkg();
    return true;
    //start silence wait
}
void USART::setAddress(uint8_t adress)
{
    USART::myAddress = adress;
}

#include "apps.h"
void USART::pool()
{
    if(USART::pkgSize == 0)
        return;
    if(USART::myAddress == 0)
    {
        /*Packets::readRS p;
        p.magic = 's';
        //p.data*/

        USB::sendRawData((uint8_t*)&USART::recieve,USART::pkgSize + 1);
        USART::pkgSize = 0;
        return;
    }
    uint16_t crc = USART::recieve.buf[USART::pkgSize - 2] + (USART::recieve.buf[USART::pkgSize - 1] << 8);
    if(crc != 0)
    {
        uint16_t newCRC = CRC16(
                                &USART::recieve.buf[1],
                                USART::pkgSize - 3);
        if(newCRC != crc)
        {
            // Drov wrong packet
            USART::pkgSize = 0;
            return;
        }

    }
    if(!APPS::pushPkg(&USART::recieve.buf[1],USART::pkgSize - 3))
    {
        uint8_t bbuf[2] = {0x80,0x01};
        bbuf[0] |= USART::recieve.buf[1];
        USART::send(bbuf,2);
    };
    USART::pkgSize = 0;

    //APPS::pushPkg()
}
